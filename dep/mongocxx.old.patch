diff --git a/src/bsoncxx/CMakeLists.txt b/src/bsoncxx/CMakeLists.txt
index 87e72bd2a..420765f02 100644
--- a/src/bsoncxx/CMakeLists.txt
+++ b/src/bsoncxx/CMakeLists.txt
@@ -77,7 +77,15 @@ set(BSONCXX_HEADER_INSTALL_DIR "${CMAKE_INSTALL_INCLUDEDIR}/bsoncxx/${BSONCXX_IN
 set(LIBBSON_REQUIRED_VERSION 1.10.0)
 set(LIBBSON_REQUIRED_ABI_VERSION 1.0)
 
-if (BUILD_SHARED_LIBS)
+if (LIBBSON_FROM_SUBPROJECT)
+    set(libbson_libraries             bson_static)
+    set(libbson_include_directories
+        ${LIBBSON_BINARY_DIR}/src
+        ${LIBBSON_FROM_SUBPROJECT}/src
+        ${LIBBSON_FROM_SUBPROJECT}/src/bson
+        ${LIBBSON_FROM_SUBPROJECT}/src/jsonsl)
+    set(libbson_definitions           "BSON_COMPILATION;BSON_STATIC;JSONSL_PARSE_NAN")
+elseif (BUILD_SHARED_LIBS)
     find_package(libbson-${LIBBSON_REQUIRED_ABI_VERSION} ${LIBBSON_REQUIRED_VERSION} REQUIRED)
     set(libbson_libraries ${BSON_LIBRARIES})
     set(libbson_include_directories ${BSON_INCLUDE_DIRS})
@@ -112,8 +120,8 @@ set(bsoncxx_sources
 )
 
 include_directories(
-    ${CMAKE_SOURCE_DIR}/src
-    ${CMAKE_BINARY_DIR}/src
+    ${PROJECT_SOURCE_DIR}/..
+    ${PROJECT_BINARY_DIR}/..
 )
 
 if (BSONCXX_POLY_USE_BOOST)
@@ -136,6 +144,13 @@ set_target_properties(bsoncxx_testing PROPERTIES
     OUTPUT_NAME bsoncxx-testing
 )
 
+if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
+    target_compile_options(bsoncxx PUBLIC "/Zc:__cplusplus")
+    target_compile_options(bsoncxx_testing PUBLIC "/Zc:__cplusplus")
+    target_compile_definitions(bsoncxx PUBLIC _ENABLE_EXTENDED_ALIGNED_STORAGE)
+    target_compile_definitions(bsoncxx_testing PUBLIC _ENABLE_EXTENDED_ALIGNED_STORAGE)
+endif()
+
 if (BUILD_SHARED_LIBS)
     set_target_properties(bsoncxx PROPERTIES
         OUTPUT_NAME bsoncxx
@@ -249,4 +264,4 @@ install(
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PKG}-${BSONCXX_VERSION}
 )
 
-add_subdirectory(test)
+# add_subdirectory(test)
diff --git a/src/mongocxx/CMakeLists.txt b/src/mongocxx/CMakeLists.txt
index dfd3dc923..b63d69546 100644
--- a/src/mongocxx/CMakeLists.txt
+++ b/src/mongocxx/CMakeLists.txt
@@ -33,7 +33,18 @@ set(MONGOCXX_HEADER_INSTALL_DIR "${CMAKE_INSTALL_INCLUDEDIR}/mongocxx/${MONGOCXX
 set(LIBMONGOC_REQUIRED_VERSION 1.10.0)
 set(LIBMONGOC_REQUIRED_ABI_VERSION 1.0)
 
-if (BUILD_SHARED_LIBS)
+if (LIBMONGOC_FROM_SUBPROJECT)
+    set(libmongoc_libraries             mongoc_static)
+    set(libmongoc_include_directories
+        ${LIBBSON_BINARY_DIR}/src
+        ${LIBBSON_FROM_SUBPROJECT}/src
+        ${LIBBSON_FROM_SUBPROJECT}/src/bson
+        ${LIBBSON_FROM_SUBPROJECT}/src/jsonsl
+        ${LIBMONGOC_BINARY_DIR}/src
+        ${LIBMONGOC_FROM_SUBPROJECT}/src
+        ${LIBMONGOC_FROM_SUBPROJECT}/src/mongoc)
+    set(libmongoc_definitions           "MONGOC_STATIC")
+elseif (BUILD_SHARED_LIBS)
     find_package(libmongoc-${LIBMONGOC_REQUIRED_ABI_VERSION} ${LIBMONGOC_REQUIRED_VERSION} REQUIRED)
     set(libmongoc_libraries ${MONGOC_LIBRARIES})
     set(libmongoc_include_directories ${MONGOC_INCLUDE_DIRS})
@@ -117,8 +128,8 @@ set(mongocxx_sources
 )
 
 include_directories(
-    ${CMAKE_SOURCE_DIR}/src
-    ${CMAKE_BINARY_DIR}/src
+    ${PROJECT_SOURCE_DIR}/..
+    ${PROJECT_BINARY_DIR}/..
 )
 
 # We define two libraries: the normal library and the testing-only library.  The testing-only
@@ -135,6 +146,10 @@ target_compile_definitions(mongocxx_mocked PUBLIC MONGOCXX_TESTING)
 
 if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
     target_compile_options(mongocxx_mocked PRIVATE /bigobj)
+    target_compile_options(mongocxx PUBLIC "/Zc:__cplusplus")
+    target_compile_options(mongocxx_mocked PUBLIC "/Zc:__cplusplus")
+    target_compile_definitions(mongocxx PUBLIC _ENABLE_EXTENDED_ALIGNED_STORAGE)
+    target_compile_definitions(mongocxx_mocked PUBLIC _ENABLE_EXTENDED_ALIGNED_STORAGE)
 endif()
 
 set_target_properties(mongocxx_mocked PROPERTIES
@@ -242,4 +257,4 @@ install(
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PKG}-${MONGOCXX_VERSION}
 )
 
-add_subdirectory(test)
+# add_subdirectory(test)
diff --git a/src/mongocxx/collection.cpp b/src/mongocxx/collection.cpp
index 3480cb449..99e5aae0c 100644
--- a/src/mongocxx/collection.cpp
+++ b/src/mongocxx/collection.cpp
@@ -230,7 +230,7 @@ bsoncxx::document::value as_bson(const mongocxx::options::change_stream& cs) {
         if ((count < 0) || (count >= std::numeric_limits<std::uint32_t>::max())) {
             throw mongocxx::logic_error{mongocxx::error_code::k_invalid_parameter};
         }
-        out.append(bsoncxx::builder::basic::kvp("maxAwaitTimeMS", count));
+        out.append(bsoncxx::builder::basic::kvp("maxAwaitTimeMS", static_cast<int64_t>(count)));
     }
 
     return out.extract();
diff --git a/src/mongocxx/instance.cpp b/src/mongocxx/instance.cpp
index e67d41ec7..24167f757 100644
--- a/src/mongocxx/instance.cpp
+++ b/src/mongocxx/instance.cpp
@@ -76,9 +76,11 @@ std::atomic<instance*> current_instance{nullptr};
 static_assert(std::is_standard_layout<decltype(current_instance)>::value,
               "Must be standard layout");
 #if (!defined(__GNUC__) || (defined(__clang__) && !defined(__GLIBCXX__))) || (__GNUC__ >= 5)
+#if !(defined(_MSC_VER) && __cplusplus >= 201704L)
 static_assert(std::is_trivially_constructible<decltype(current_instance)>::value,
               "Must be trivially constructible");
 #endif
+#endif
 static_assert(std::is_trivially_destructible<decltype(current_instance)>::value,
               "Must be trivially destructible");
 
